** Uporava scp **
Computer A -- local workstation
Computer B -- remote machine accsesable over ssh

1. Computer A in not behind NAT firewall
   Run this command from computer B
    scp /path/to/file/on/ComputerB ComputerAUser@ComputerA:/path/to/dump/file/on/ComputerA
   Run this command from computer A
    scp ComputerBUser@ComputerB:/path/to/file/on/ComputerB /path/to/dump/file/on/ComputerA
2. Computer A is behind NAT firewall
    When establishing the ssh connection ComputerA -> ComputerB, do so with the -R option in the following manner. 
    ssh ComputerBUser@ComputerB -R 2222:localhost:22 
    where ComputerBUser is the username for the account on ComputerB being authenticated and 2222 is a free port on ComputerB. 
    We'll use this port to reverse-tunnel back to ComputerA from ComputerB.
    Now from ComputerB, you can issue the scp command in the following manner to copy files from ComputerB -> ComputerA where ComputerAUser is your username on ComputerA:
    scp -P 2222 /path/to/file/on/ComputerB ComputerAUser@localhost:/path/to/drop/file/on/computerA
    What's happening here? It looks like we are simply telling ComputerB to send the file back to itself 
    because we're passing localhost instead of ComputerA. We are indeed telling scp to pass the file back to ComputerB, 
    but to port 2222. All connections to port 2222 on ComputerB get forwarded to port 22 (default ssh port) on ComputerA. 
    Thus, by tunneling backwards over the existing ssh connection, it doesn't matter that ComputerA 
    is behind an NAT firewall.
